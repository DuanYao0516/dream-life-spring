<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.hellospring.mapper.CommentMapper">
    <resultMap id="BaseResultMap" type="com.example.hellospring.entity.Comment">
        <id column="comment_id" property="commentId" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="blog_id" property="blogId" jdbcType="BIGINT"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="create_at" property="createAt" jdbcType="TIMESTAMP"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="reply" property="reply" jdbcType="VARCHAR"/>
        <result column="reply_at" property="replyAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        comment_id, user_id, blog_id, content, email, create_at, reply, reply_at, status
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from comment
        where comment_id = #{commentId,jdbcType=BIGINT}
    </select>

    <insert id="insert" parameterType="com.example.hellospring.entity.Comment">
        insert into comment (comment_id, user_id, blog_id,
        content, email, create_at,
        reply, reply_at, status)
        values (#{commentId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{blogId,jdbcType=BIGINT},
        #{content,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{createAt,jdbcType=TIMESTAMP},
        #{reply,jdbcType=VARCHAR}, #{replyAt,jdbcType=TIMESTAMP}, #{status,jdbcType=TINYINT})
    </insert>

    <insert id="insertSelective" parameterType="com.example.hellospring.entity.Comment">
        insert into comment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="commentId != null">
                comment_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="blogId != null">
                blog_id,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="createAt != null">
                create_at,
            </if>
            <if test="reply != null">
                reply,
            </if>
            <if test="replyAt != null">
                reply_at,
            </if>
            <if test="status != null">
                status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="commentId != null">
                #{commentId,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="blogId != null">
                #{blogId,jdbcType=BIGINT},
            </if>
            <if test="content != null">
               #{content,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null">
                #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="reply != null">
                #{reply,jdbcType=VARCHAR},
            </if>
            <if test="replyAt != null">
                #{replyAt,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.example.hellospring.entity.Comment">
        update comment
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="blogId != null">
                blog_id = #{blogId,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email= #{email,jdbcType=VARCHAR},
            </if>
            <if test="createAt != null">
                create_at = #{createAt,jdbcType=TIMESTAMP},
            </if>
            <if test="reply != null">
                reply = #{reply,jdbcType=VARCHAR},
            </if>
            <if test="replyAt != null">
                reply_at = #{replyAt,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
        </set>
        <where>
            comment_id = #{commentId,jdbcType=BIGINT}
        </where>
    </update>

    <update id="updateByPrimaryKey" parameterType="com.example.hellospring.entity.Comment">
        update comment
        set user_id = #{userId,jdbcType=BIGINT},
        blog_id = #{blogId,jdbcType=BIGINT},
        content = #{content,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        create_at = #{createAt,jdbcType=TIMESTAMP},
        reply = #{reply,jdbcType=VARCHAR},
        reply_at = #{replyAt,jdbcType=TIMESTAMP},
        status = #{status,jdbcType=TINYINT}
        where comment_id = #{commentId,jdbcType=BIGINT}
    </update>

    <select id="findCommentListByBlogId" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from comment
        where
        <if test="blogId!=null">
            blog_id = #{blogId}
        </if>
        <if test="status!=null">
            AND status = #{status}
        </if>
        order by comment_id desc
        <if test="start!=null and limit!=null">
            limit #{start},#{limit}
        </if>
    </select>


    <select id="findCommentListByUserId" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from comment
        where
            blog_id in (
                select blog_id from blog where blog.user_id = #{userId}
            )
        <if test="status!=null">
            AND status = #{status}
        </if>
        order by comment_id desc
        <if test="start!=null and limit!=null">
            limit #{start},#{limit}
        </if>
    </select>


    <select id="getTotalCommentsByBlogId" parameterType="Map" resultType="int">
        select count(*) from comment
        where
        <if test="blogId!=null">
            blog_id = #{blogId}
        </if>
        <if test="status!=null">
            AND status = #{status}
        </if>
<!--        <if test="userId!=null">-->
<!--            AND user_id = #{userId}-->
<!--        </if>-->
    </select>

<!--    <update id="deleteBatch">-->
<!--        update comment-->
<!--        set is_deleted=1 where comment_id in-->
<!--        <foreach item="id" collection="array" open="(" separator="," close=")">-->
<!--            #{id}-->
<!--        </foreach>-->
<!--    </update>-->

    <update id="checkDone">
        update comment
        set status=1 where comment_id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
        and status = 0
    </update>
    
    <select id="getTotalCommentsByUserId" parameterType="Long" resultType="int">
        select count(*) from comment
        where
        blog_id in (
            select blog_id from blog where blog.user_id = #{userId}
            )
    </select>

    <!--int deleteBatch(Integer[] ids);-->
    <delete id="deleteBatch">
        delete from comment where comment_id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>